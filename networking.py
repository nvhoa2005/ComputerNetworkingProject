import socket
import pickle
import threading
import pygame
from const import *
from card import Card
import random
import queue  # H√†ng ƒë·ª£i ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu kh√¥ng ƒë·ªìng b·ªô
import select

class Network:
    def __init__(self, host='localhost', port=5555):
        self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server = host
        self.port = port
        self.addr = (self.server, self.port)
        self.id = None
        self.data_queue = queue.Queue()  # H√†ng ƒë·ª£i ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu
        self.lock = threading.Lock()
        self.callback = None

    def connect(self):
        try:
            self.client.connect(self.addr)
            self.id = self.client.recv(4096).decode()
            print(f"Connected to server with ID {self.id}")
            
            # Ch·∫°y lu·ªìng ri√™ng ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu m√† kh√¥ng l√†m lag giao di·ªán
            threading.Thread(target=self.receive, daemon=True).start()
        except Exception as e:
            print("Connection failed:", e)

    def receive(self, callback=None):
        """Lu√¥n l·∫Øng nghe d·ªØ li·ªáu t·ª´ server v√† ƒë·∫©y v√†o queue ƒë·ªÉ x·ª≠ l√Ω"""
        if callback is not None:
            self.callback = callback  # üî• C·∫≠p nh·∫≠t callback m·ªói l·∫ßn g·ªçi
        print("receive")
        while True:
            try:
                compressed_data = self.client.recv(4096)
                if not compressed_data:
                    break
                data = pickle.loads(compressed_data)
                print("üì• Nh·∫≠n d·ªØ li·ªáu t·ª´ server:", data)
                # Ki·ªÉm tra callback tr∆∞·ªõc khi g·ªçi
                with self.lock:  # üîí D√πng lock ƒë·ªÉ tr√°nh tranh ch·∫•p d·ªØ li·ªáu
                    if self.callback is not None:
                        print("callback")
                        self.callback(data)
                    else:
                        print("Kh√¥ng c√≥ callback ƒë∆∞·ª£c truy·ªÅn")
                    self.data_queue.put(data)
                print("Hello")
            except Exception as e:
                print(f"K·∫øt n·ªëi ƒë·∫øn server b·ªã m·∫•t: {e}")
                break
    
    # def receive(self, callback=None):
    #     """Nh·∫≠n d·ªØ li·ªáu t·ª´ server m√† kh√¥ng l√†m ch·∫≠m game loop"""
    #     ready, _, _ = select.select([self.client], [], [], 0)  # Ki·ªÉm tra socket c√≥ d·ªØ li·ªáu kh√¥ng
    #     if ready:
    #         try:
    #             compressed_data = self.client.recv(4096)
    #             if not compressed_data:
    #                 return
                
    #             data = pickle.loads(compressed_data)
    #             print("üì• Nh·∫≠n d·ªØ li·ªáu t·ª´ server:", data)

    #             if callback is not None and callable(callback):
    #                 callback(data)

    #         except Exception as e:
    #             print(f"K·∫øt n·ªëi ƒë·∫øn server b·ªã m·∫•t: {e}")

    def get_data(self):
        """L·∫•y d·ªØ li·ªáu t·ª´ queue (n·∫øu c√≥) ƒë·ªÉ x·ª≠ l√Ω trong game loop"""
        try:
            return self.data_queue.get_nowait()
        except queue.Empty:
            return None

    def send(self, data):
        """G·ª≠i d·ªØ li·ªáu m√† kh√¥ng ch·∫∑n giao di·ªán"""
        try:
            compressed_data = pickle.dumps(data)
            with self.lock:  # üîí D√πng lock ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≥ xung ƒë·ªôt khi g·ª≠i
                self.client.send(compressed_data)
        except Exception as e:
            print("Error sending data:", e)
            return None

    def close(self):
        self.client.close()

# Server-side code
def start_server(host='127.0.0.1', port=5555, max_clients=8):
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((host, port))
    server.listen(max_clients)
    print("Server started, waiting for players...")

    clients = []
    
    def broadcast(data, sender_conn):
        """ G·ª≠i d·ªØ li·ªáu ƒë·∫øn t·∫•t c·∫£ client tr·ª´ ng∆∞·ªùi g·ª≠i """
        disconnected_clients = []  # Danh s√°ch client b·ªã m·∫•t k·∫øt n·ªëi
        for conn in clients:
            if conn != sender_conn:
                try:
                    conn.send(pickle.dumps(data))
                    print(data)
                    print(f"üì§ ƒê√£ g·ª≠i ƒë·∫øn client {conn}")
                except:
                    print(f"üî¥ Client {conn} m·∫•t k·∫øt n·ªëi, ƒë√°nh d·∫•u ƒë·ªÉ x√≥a.")
                    disconnected_clients.append(conn)

        # X√≥a client b·ªã m·∫•t k·∫øt n·ªëi sau khi g·ª≠i xong
        for conn in disconnected_clients:
            clients.remove(conn)


    def handle_client(conn, player_id):
        """ X·ª≠ l√Ω t·ª´ng client trong lu·ªìng ri√™ng bi·ªát """
        while True:
            try:
                data = pickle.loads(conn.recv(4096))
                print(f"Received from Player {player_id}: {data}")
                broadcast(data, conn)  # G·ª≠i ƒë·∫øn c√°c client kh√°c
            except Exception as e:
                print(f"Player {player_id} disconnected: {e}")
                clients.remove(conn)
                conn.close()
                break

    while True:
        conn, addr = server.accept()
        if len(clients) >= max_clients:
            print("Server full, rejecting connection")
            conn.close()
            continue

        clients.append(conn)
        player_id = len(clients)
        conn.send(str(player_id).encode())  # G·ª≠i ID cho client
        print(f"Player {player_id} connected from {addr}")

        threading.Thread(target=handle_client, args=(conn, player_id)).start()

        # Khi c√≥ √≠t nh·∫•t 4 ng∆∞·ªùi ch∆°i, b·∫Øt ƒë·∫ßu game
        if len(clients) == FOUR_PLAYERS:
            start_game(clients)  # H√†m chia b√†i cho 4 ng∆∞·ªùi ƒë·∫ßu ti√™n

def start_game(clients):
    """ B·∫Øt ƒë·∫ßu game khi c√≥ ƒë·ªß 4 ng∆∞·ªùi ch∆°i """
    deck = [Card(suit, rank) for suit in SUITS for rank in RANKS]
    random.shuffle(deck)

    players = {i: [card.serialize() for card in deck[i*13:(i+1)*13]] for i in range(FOUR_PLAYERS)}
    for player in range(FOUR_PLAYERS):
        players[player] = sorted(
            players[player],
            key=lambda card: (RANK_ORDER[card["rank"]], SUIT_ORDER[card["suit"]])
        )

    for i, conn in enumerate(clients[:FOUR_PLAYERS]):
        data = {
            "game_started": True,
            "cards": players
        }
        try:
            compressed_data = pickle.dumps(data)  # N√©n tr∆∞·ªõc khi g·ª≠i
            conn.send(compressed_data)  # G·ª≠i d·ªØ li·ªáu ƒë√£ n√©n
            print(f"ƒê√£ g·ª≠i b√†i cho player {i+1}")
        except Exception as e:
            print(f"L·ªói khi g·ª≠i b√†i cho Player {i + 1}: {e}")

    print("All players connected, game starting!")
